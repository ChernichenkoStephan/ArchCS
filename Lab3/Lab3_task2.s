/*
–ó–∞–¥–∞–Ω–∏–µ 2.
–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ü–µ–ª–∏–∫–æ–º –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é –Ω–∞ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ, –≤—ã—á–∏—Å–ª—è—é—â—É—é
–∑–Ω–∞—á–µ–Ω–∏–µ ùë¶(ùë•) –¥–ª—è ùë• = 13 –∏ –≤—ã–≤–æ–¥—è—â—É—é –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
–≤—ã–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ libc (–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, —Ñ—É–Ω–∫—Ü–∏–∏ printf).
*/

.section __DATA,__data
L_.str:
	.asciz	"y = 3 * 12 + 1 = %d\n"

.section __TEXT,__text
.globl _main
_main:
  pushq %rbp // init

  movl $12, %eax                // eax = y = x
  imul $3, %eax
  add $1, %eax

  movl	%eax, %esi
  leaq	L_.str(%rip), %rdi
	// movb	$0, %al
	callq	_printf

  popq %rbp
	xor %eax, %eax
	ret
  // movl $0x2000001, %eax
  // syscall
