/*

–ó–∞–¥–∞–Ω–∏–µ 2. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ùõº[ ]
(–≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ —è–∑—ã–∫–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è).
3 –ù–∞–π—Ç–∏ —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞

*/

.globl _sum
_sum:
  pushq %rbp
  sub $16, %rsp
  pushq %rsi
  pushq %rdi

  xorq %r12, %r12 // temp_array
  xorq %r13, %r13 // temp_size
  xorq %r14, %r14 // i
  xorq %r15, %r15 // res

  movq %rdi, %r12 // array
	movq %rsi, %r13 // size

  begin_iteration:
  cmp %r13, %r14
  jge end_loop

  movq (%r12, %r14, 4), %rsi
  addq %rsi, %r15

  incq %r14
  jmp begin_iteration
  end_loop:

  movq %r15, %rax // return

  popq %rdi
  popq %rsi
  add $16, %rsp
  popq %rbp
  ret
