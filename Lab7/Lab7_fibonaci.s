/*

–ó–∞–¥–∞–Ω–∏–µ 5. –û–ø–∏—à–∏—Ç–µ –≤—Å—Ç–∞–≤–∫—É –ª–∏–±–æ —Ñ—É–Ω–∫—Ü–∏—é, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â—É—é –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–Ω–æ–π
–¥–ª–∏–Ω—ã ùëÅ –ø–µ—Ä–≤—ã–º–∏ ùëÅ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–¥–∞–Ω–∏—è 3 –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã –õ6.

*/


.globl _fibonaci
_fibonaci:
  pushq %rbp
  sub $16, %rsp //; 5*8 40
  pushq %rsi
  pushq %rdi
  pushq %rbx
  pushq %rax

  xorq %r12, %r12 // temp_array
  xorq %r13, %r13 // temp_size
  xorq %r14, %r14 // i

  movq %rdi, %r12 // array
	movq %rsi, %r13 // size

  movq $1, %rsi //; prew r12
  movq $1, %rdi //; curr r13
  movq $1, %rbx //; next r14

  begin_iteration:
  cmp %r13, %r14
  jge end_loop

  movq %rbx, %rdi //; curr = next

  movq %rdi, %rax
  addq %rsi, %rax //; curr + prew
  movq %rax, %rbx //; next = curr + prew

  movq %rdi, %rsi //; prew = curr

  movl %esi, (%r12, %r14, 4)

  incq %r14
  jmp begin_iteration
  end_loop:

  popq %rax
  popq %rbx
  popq %rdi
  popq %rsi
  add $16, %rsp
  popq %rbp
  ret
